{"version":3,"sources":["color.js","App.js"],"names":["theme","App","useState","working","setWorking","text","setText","edit","setEdit","toDos","setToDos","useEffect","loadToDos","loadWorking","saveWorking","AsyncStorage","setItem","e","console","log","s","getItem","saveToDos","toSave","JSON","stringify","parse","Object","keys","map","key","update","addToDo","newToDos","Date","now","completed","editToDo","onChangeUpdateText","payload","updateToDo","deleteToDo","Platform","OS","confirm","Alert","alert","style","onPress","completedToDo","View","styles","container","StatusBar","header","TouchableOpacity","Text","btnText","color","TextInput","input","value","returnKeyType","placeholder","onChangeText","onSubmitEditing","ScrollView","toDo","updateInput","toDoComplete","Fontisto","name","size","toDoStyles","toDoText","toDoUpdate","SimpleLineIcons","toDoDelete","StyleSheet","create","flex","backgroundColor","paddingHorizontal","flexDirection","justifyContent","marginTop","fontSize","fontWeight","marginVertical","paddingVertical","borderRadius","marginBottom","alignItems","paddingLeft","width","marginLeft","textDecorationLine"],"mappings":"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","file":"static/js/app.bf7ed1ae.chunk.js","sourcesContent":["export const theme = {\r\n    bg: \"black\",\r\n    grey: \"#3A3D40\",\r\n    toDoBg: \"#5C5C60\",\r\n    white: \"white\",\r\n}\r\n","import {StatusBar} from 'expo-status-bar';\nimport {\n    StyleSheet,\n    ScrollView,\n    Text,\n    View,\n    TouchableOpacity,\n    TextInput,\n    Alert, Platform\n} from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport {Fontisto, SimpleLineIcons} from '@expo/vector-icons';\nimport {theme} from \"./color\";\nimport {useEffect, useState} from \"react\";\n\nconst WORKING_KEY = \"@working\";\nconst STORAGE_KEY = \"@toDos\";\n\nexport default function App() {\n    const [working, setWorking] = useState(true);\n    const [text, setText] = useState(\"\");\n    const [edit, setEdit] = useState(\"\");\n    const [toDos, setToDos] = useState({});\n\n    useEffect(() => {\n        loadToDos();\n        loadWorking();\n\n    }, []);\n\n    const travel = () => {\n        setWorking(false)\n        saveWorking(working);\n    };\n    const work = () => {\n        setWorking(true)\n        saveWorking(working);\n    };\n    const onChangeText = (payload) => setText(payload);\n\n    const saveWorking = async (working) => {\n        try {\n            await AsyncStorage.setItem(WORKING_KEY, working ? \"0\" : \"1\");\n        } catch (e) {\n            console.log(e);\n        }\n    }\n    const loadWorking = async () => {\n        const s = await AsyncStorage.getItem(WORKING_KEY);\n        if (s === \"1\") {\n            setWorking(true);\n        } else {\n            setWorking(false);\n        }\n    }\n    const saveToDos = async (toSave) => {\n        try {\n            await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n        } catch (e) {\n            console.log(e);\n        }\n    }\n    const loadToDos = async () => {\n        const toDos = JSON.parse(await AsyncStorage.getItem(STORAGE_KEY));\n        Object.keys(toDos).map((key) => (\n            toDos[key].update = false\n        ));\n        setToDos(toDos);\n    }\n    const addToDo = async () => {\n        if (text === \"\") {\n            return\n        }\n        // ver.es6\n        const newToDos = {\n            ...toDos,\n            [Date.now()]: {text, working, completed: false, update: false}\n        }\n        setToDos(newToDos);\n        await saveToDos(newToDos);\n        setText('');\n    }\n\n    const editToDo = async (key) => {\n        const newToDos = {...toDos}\n        newToDos[key].update = true;\n        setEdit(newToDos[key].text);\n        setToDos(newToDos);\n        saveToDos(newToDos);\n    }\n\n    const onChangeUpdateText = async (payload, key) => {\n        if (edit === \"\") {\n            return\n        }\n        setEdit(payload);\n    }\n    const updateToDo = async (key) => {\n        const newToDos = {...toDos}\n        if (newToDos[key].text === \"\") {\n            return\n        }\n        newToDos[key].text = edit;\n        newToDos[key].update = false;\n        setToDos(newToDos);\n        saveToDos(newToDos);\n    }\n\n    const deleteToDo = async (key) => {\n        if (Platform.OS === \"web\") {\n            const ok = confirm(\"Do you want to delete this To Do?\")\n            if(ok){\n                const newToDos = {...toDos}\n                delete newToDos[key];\n                setToDos(newToDos);\n                saveToDos(newToDos);\n            }\n        } else {\n            Alert.alert(\"Delete To Do\", \"Are you sure?\", [\n                {text: \"Cancel\"},\n                {\n                    text: \"I'm Sure\",\n                    style: \"destructive\",\n                    onPress: () => {\n                        const newToDos = {...toDos}\n                        delete newToDos[key];\n                        setToDos(newToDos);\n                        saveToDos(newToDos);\n                    },\n                },\n            ]);\n        }\n    }\n\n    const completedToDo = async (key) => {\n        const newToDos = {...toDos}\n        newToDos[key].completed = !newToDos[key].completed;\n        setToDos(newToDos);\n        saveToDos(newToDos);\n    }\n\n    return (\n        <View style={styles.container}>\n            <StatusBar style=\"light\"/>\n            <View style={styles.header}>\n                <TouchableOpacity onPress={work}>\n                    <Text style={{...styles.btnText, color: working ? \"white\" : theme.grey}}>Work</Text>\n                </TouchableOpacity>\n                <TouchableOpacity onPress={travel}>\n                    <Text style={{...styles.btnText, color: !working ? \"white\" : theme.grey}}>Travel</Text>\n                </TouchableOpacity>\n            </View>\n            <TextInput\n                style={styles.input}\n                value={text}\n                returnKeyType=\"done\"\n                placeholder={working ? \"What do you have to do?\" : \"Where do you want to go?\"}\n                onChangeText={onChangeText}\n                onSubmitEditing={addToDo}\n            />\n            <ScrollView>\n                {Object.keys(toDos).map((key) => (\n                    toDos[key].working === working ? (\n                        <View style={styles.toDo} key={key}>\n                            {toDos[key].update ?\n                                <TextInput\n                                    style={styles.updateInput}\n                                    value={edit}\n                                    returnKeyType=\"done\"\n                                    onChangeText={(e) => onChangeUpdateText(e, key)}\n                                    onSubmitEditing={() => updateToDo(key)}\n                                />\n                                :\n                                (\n                                    <>\n                                        <TouchableOpacity style={styles.toDoComplete}\n                                                          onPress={() => completedToDo(key)}>\n                                            <Fontisto\n                                                name={toDos[key].completed ? 'checkbox-active' : 'checkbox-passive'}\n                                                size={16}\n                                                color={theme.white}/>\n                                        </TouchableOpacity>\n                                        <Text style={toDoStyles(toDos[key].completed).toDoText}>{toDos[key].text}</Text>\n                                        {!toDos[key].completed &&\n                                            <TouchableOpacity style={styles.toDoUpdate} onPress={() => editToDo(key)}>\n                                                <SimpleLineIcons name=\"pencil\" size={16} color={theme.toDoBg}/>\n                                            </TouchableOpacity>\n                                        }\n                                        <TouchableOpacity style={toDoStyles(toDos[key].completed).toDoDelete}\n                                                          onPress={() => deleteToDo(key)}>\n                                            <Fontisto name=\"trash\" size={16} color={theme.toDoBg}/>\n                                        </TouchableOpacity>\n                                    </>\n                                )\n                            }\n                        </View>\n                    ) : null\n                ))}\n            </ScrollView>\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: theme.bg,\n        paddingHorizontal: 20,\n    },\n    header: {\n        flexDirection: \"row\",\n        justifyContent: \"space-between\",\n        marginTop: 100,\n    },\n    btnText: {\n        fontSize: 38,\n        fontWeight: \"600\",\n    },\n    input: {\n        marginVertical: 20,\n        paddingHorizontal: 20,\n        paddingVertical: 15,\n        fontSize: 18,\n        borderRadius: 30,\n        backgroundColor: \"white\",\n    },\n    updateInput: {\n        flex: 1,\n        paddingHorizontal: 20,\n        paddingVertical: 15,\n        fontSize: 18,\n        borderRadius: 30,\n        backgroundColor: \"white\",\n    },\n    toDo: {\n        marginBottom: 10,\n        paddingVertical: 20,\n        paddingHorizontal: 20,\n        borderRadius: 15,\n        backgroundColor: theme.grey,\n        flexDirection: \"row\",\n        alignItems: \"center\"\n    },\n    toDoText: {\n        paddingLeft: 10,\n        fontSize: 16,\n        fontWeight: \"500\",\n        color: \"white\"\n    },\n    toDoComplete: {\n        width: 20,\n    },\n    toDoUpdate: {\n        marginLeft: \"auto\",\n    },\n    toDoDelete: {\n        marginLeft: 20,\n    }\n});\n\nconst toDoStyles = (completed) => StyleSheet.create({\n    toDoText: {\n        paddingLeft: 10,\n        fontSize: 16,\n        fontWeight: \"500\",\n        color: \"white\",\n        textDecorationLine: completed ? \"line-through\" : \"none\",\n    },\n    toDoDelete: {\n        marginLeft: completed ? \"auto\" : 20,\n    }\n})\n"],"sourceRoot":""}